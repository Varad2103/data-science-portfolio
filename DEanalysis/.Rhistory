end_date <- as.Date("2024-01-01")
# 1.1 Download daily equity data for JPM and WFC
getSymbols(c("JPM", "WFC"), from = start_date, to = end_date)
# Extract adjusted close prices
JPM_close <- JPM$JPM.Adjusted
WFC_close <- WFC$WFC.Adjusted
JPM_daily_return <- diff(log(JPM_close))
WFC_daily_return <- diff(log(WFC_close))
JPM_weekly_return <- diff(log(to.weekly(JPM_close)$JPM.Close))
JPM_daily_return <- diff(log(JPM_close))
WFC_daily_return <- diff(log(WFC_close))
# Convert to weekly data and extract the closing prices for JPM and WFC
JPM_weekly_close <- to.weekly(JPM_close)$JPM.Close
WFC_weekly_close <- to.weekly(WFC_close)$WFC.Close
# Calculate weekly log returns for each stock
JPM_weekly_return <- diff(log(as.numeric(JPM_weekly_close)))
WFC_weekly_return <- diff(log(as.numeric(WFC_weekly_close)))
par(mfrow = c(2, 2))  # Set 2x2 layout for plots
hist(JPM_daily_return, main = "JPM Daily Log Return", col = "lightblue", xlab = "Log Return")
hist(WFC_daily_return, main = "WFC Daily Log Return", col = "lightgreen", xlab = "Log Return")
hist(JPM_weekly_return, main = "JPM Weekly Log Return", col = "lightcoral", xlab = "Log Return")
JPM_daily_return <- na.omit(JPM_daily_return)
WFC_daily_return <- na.omit(WFC_daily_return)
JPM_weekly_return <- na.omit(JPM_weekly_return)
WFC_weekly_return <- na.omit(WFC_weekly_return)
par(mfrow = c(2, 2))  # Set 2x2 layout for plots
hist(JPM_daily_return, main = "JPM Daily Log Return", col = "lightblue", xlab = "Log Return")
hist(WFC_daily_return, main = "WFC Daily Log Return", col = "lightgreen", xlab = "Log Return")
hist(JPM_weekly_return, main = "JPM Weekly Log Return", col = "lightcoral", xlab = "Log Return")
JPM_daily_return <- na.omit(JPM_daily_return)
WFC_daily_return <- na.omit(WFC_daily_return)
JPM_weekly_return <- na.omit(JPM_weekly_return)
WFC_weekly_return <- na.omit(WFC_weekly_return)
par(mfrow = c(2, 2))  # Set 2x2 layout for plots
hist(JPM_daily_return, main = "JPM Daily Log Return", col = "lightblue", xlab = "Log Return")
hist(WFC_daily_return, main = "WFC Daily Log Return", col = "lightgreen", xlab = "Log Return")
hist(JPM_weekly_return, main = "JPM Weekly Log Return", col = "lightcoral", xlab = "Log Return")
JPM_daily_return <- as.numeric(na.omit(JPM_daily_return))
WFC_daily_return <- as.numeric(na.omit(WFC_daily_return))
JPM_weekly_return <- as.numeric(na.omit(JPM_weekly_return))
WFC_weekly_return <- as.numeric(na.omit(WFC_weekly_return))
par(mfrow = c(2, 2))  # Set 2x2 layout for plots
hist(JPM_daily_return, main = "JPM Daily Log Return", col = "lightblue", xlab = "Log Return")
hist(WFC_daily_return, main = "WFC Daily Log Return", col = "lightgreen", xlab = "Log Return")
hist(JPM_weekly_return, main = "JPM Weekly Log Return", col = "lightcoral", xlab = "Log Return")
# Filter non-finite values (Inf, -Inf, NaN) after converting to numeric vectors
JPM_daily_return <- JPM_daily_return[is.finite(JPM_daily_return)]
WFC_daily_return <- WFC_daily_return[is.finite(WFC_daily_return)]
JPM_weekly_return <- JPM_weekly_return[is.finite(JPM_weekly_return)]
WFC_weekly_return <- WFC_weekly_return[is.finite(WFC_weekly_return)]
# Plot histograms
par(mfrow = c(2, 2))  # Set 2x2 layout for plots
hist(JPM_daily_return, main = "JPM Daily Log Return", col = "lightblue", xlab = "Log Return", breaks = 50)
hist(WFC_daily_return, main = "WFC Daily Log Return", col = "lightgreen", xlab = "Log Return", breaks = 50)
hist(JPM_weekly_return, main = "JPM Weekly Log Return", col = "lightcoral", xlab = "Log Return", breaks = 50)
library(quantmod)
# Re-fetch the weekly adjusted closing prices for each stock to avoid issues
JPM_weekly <- to.weekly(JPM_close)$JPM.Close
WFC_weekly <- to.weekly(WFC_close)$WFC.Close
# Ensure conversion to numeric for log calculations
JPM_weekly <- as.numeric(JPM_weekly)
WFC_weekly <- as.numeric(WFC_weekly)
# Calculate weekly log returns, handling any NA or NaN values
JPM_weekly_return <- diff(log(JPM_weekly))
WFC_weekly_return <- diff(log(WFC_weekly))
# Filter out non-finite values from weekly returns
JPM_weekly_return <- JPM_weekly_return[is.finite(JPM_weekly_return)]
WFC_weekly_return <- WFC_weekly_return[is.finite(WFC_weekly_return)]
# Check if there is data to plot after filtering
if (length(JPM_weekly_return) > 0 & length(WFC_weekly_return) > 0) {
# Plot histograms
par(mfrow = c(2, 2))  # Set 2x2 layout for plots
hist(JPM_daily_return, main = "JPM Daily Log Return", col = "lightblue", xlab = "Log Return", breaks = 50)
hist(WFC_daily_return, main = "WFC Daily Log Return", col = "lightgreen", xlab = "Log Return", breaks = 50)
hist(JPM_weekly_return, main = "JPM Weekly Log Return", col = "lightcoral", xlab = "Log Return", breaks = 50)
hist(WFC_weekly_return, main = "WFC Weekly Log Return", col = "lightyellow", xlab = "Log Return", breaks = 50)
} else {
print("Error: One or more return series is empty after filtering non-finite values.")
}
library(quantmod)
getSymbols(c("JPM", "WFC"), from = "2015-01-01", to = "2024-01-01")
jpm_data <- JPM$JPM.Adjusted
wfc_data <- WFC$WFC.Adjusted
# Daily and weekly log returns
jpm_daily_log_return <- dailyReturn(jpm_data, type = "log")
wfc_daily_log_return <- dailyReturn(wfc_data, type = "log")
jpm_weekly_log_return <- weeklyReturn(jpm_data, type = "log")
wfc_weekly_log_return <- weeklyReturn(wfc_data, type = "log")
par(mfrow = c(2, 2))
hist(jpm_daily_log_return, main = "JPM Daily Log Return", xlab = "Log Return", col = "blue")
hist(wfc_daily_log_return, main = "WFC Daily Log Return", xlab = "Log Return", col = "red")
hist(jpm_weekly_log_return, main = "JPM Weekly Log Return", xlab = "Log Return", col = "green")
hist(wfc_weekly_log_return, main = "WFC Weekly Log Return", xlab = "Log Return", col = "purple")
library(moments)
jpm_stats <- c(mean(jpm_daily_log_return), var(jpm_daily_log_return), skewness(jpm_daily_log_return), kurtosis(jpm_daily_log_return))
wfc_stats <- c(mean(wfc_daily_log_return), var(wfc_daily_log_return), skewness(wfc_daily_log_return), kurtosis(wfc_daily_log_return))
moments_df <- data.frame(
Stock = c("JPM", "WFC"),
Mean = c(jpm_stats[1], wfc_stats[1]),
Variance = c(jpm_stats[2], wfc_stats[2]),
Skewness = c(jpm_stats[3], wfc_stats[3]),
Kurtosis = c(jpm_stats[4], wfc_stats[4])
)
moments_df
plot(wfc_daily_log_return, jpm_daily_log_return, main = "JPM vs WFC Daily Log Return", xlab = "WFC Daily Log Return", ylab = "JPM Daily Log Return", col = "darkgreen", pch = 16)
model <- lm(jpm_daily_log_return ~ wfc_daily_log_return)
summary(model)
plot(wfc_daily_log_return, jpm_daily_log_return, main = "JPM vs WFC Daily Log Return", xlab = "WFC Daily Log Return", ylab = "JPM Daily Log Return", col = "darkgreen", pch = 16)
abline(model, col = "blue", lwd = 2)
skewness_custom <- function(x, adjusted = TRUE) {
n <- length(x)
mean_x <- mean(x)
s <- sd(x)
skew <- sum((x - mean_x)^3) / (n * s^3)
if (adjusted) {
skew <- sqrt(n * (n - 1)) / (n - 2) * skew
}
return(skew)
}
kurtosis_custom <- function(x, adjusted = TRUE) {
n <- length(x)
mean_x <- mean(x)
s <- sd(x)
kurt <- sum((x - mean_x)^4) / (n * s^4) - 3
if (adjusted) {
kurt <- ((n + 1) * (n - 1) / ((n - 2) * (n - 3))) * kurt + (6 * (n - 1)) / ((n - 2) * (n - 3))
}
return(kurt)
}
library(quantmod)
getSymbols("SPY", from = "2012-01-01", to = "2013-12-31")
spy_data <- SPY$SPY.Adjusted
spy_log_return <- dailyReturn(spy_data, type = "log")
# Convert daily returns to a vector for function input
spy_log_return_vec <- as.vector(spy_log_return)
# Calculate skewness
unadjusted_skew <- skewness_custom(spy_log_return_vec, adjusted = FALSE)
adjusted_skew <- skewness_custom(spy_log_return_vec, adjusted = TRUE)
unadjusted_skew
adjusted_skew
# Calculate kurtosis
unadjusted_kurt <- kurtosis_custom(spy_log_return_vec, adjusted = FALSE)
adjusted_kurt <- kurtosis_custom(spy_log_return_vec, adjusted = TRUE)
unadjusted_kurt
adjusted_kurt
# Use the getOptionChain function from quantmod
vix_options <- getOptionChain("^VIX")
# Use the getOptionChain function from quantmod
library(quantmod)
vix_options <- getOptionChain("^VIX")
# View the structure of the options data
str(vix_options)
# Download the current price for ^VIX (last quote price)
vix_price_data <- getQuote("^VIX")
vix_price <- vix_price_data$Last
vix_price
# Calculate the average of Bid and Ask for calls and puts at each expiration
vix_options_with_price <- lapply(vix_options, function(option_data) {
option_data$Price <- (option_data$Bid + option_data$Ask) / 2
return(option_data)
})
# Check the structure of the modified options data
str(vix_options_with_price)
# Add InTheMoney column: TRUE if the option is in-the-money
vix_options_with_itm <- lapply(vix_options_with_price, function(option_data) {
option_data$InTheMoney <- ifelse(option_data$Type == "call" & option_data$Strike < vix_price, TRUE,
ifelse(option_data$Type == "put" & option_data$Strike > vix_price, TRUE, FALSE))
return(option_data)
})
vix_options_with_itm <- lapply(vix_options_with_price, function(option_data) {
# Check if the necessary columns are present in the data
if("Strike" %in% colnames(option_data) && "Bid" %in% colnames(option_data) && "Ask" %in% colnames(option_data)) {
# Add InTheMoney column based on the call/put condition
option_data$InTheMoney <- ifelse(option_data$Type == "call" & option_data$Strike < vix_price, TRUE,
ifelse(option_data$Type == "put" & option_data$Strike > vix_price, TRUE, FALSE))
}
return(option_data)
})
# (4) Add InTheMoney column
# We will now explicitly check the structure of the data and handle potential issues with empty rows.
vix_options_with_itm <- lapply(vix_options_with_price, function(option_data) {
# Check if the necessary columns exist in the data
if(!all(c("Strike", "Bid", "Ask", "Type") %in% colnames(option_data))) {
warning("Missing required columns in option data")
return(option_data)  # Skip this data frame if columns are missing
}
# Ensure there are no empty rows or NAs in the relevant columns
option_data <- option_data[!is.na(option_data$Strike) & !is.na(option_data$Bid) & !is.na(option_data$Ask) & !is.na(option_data$Type), ]
# Check if there are any rows remaining after filtering
if (nrow(option_data) == 0) {
warning("No valid rows left in option data after filtering")
return(option_data)  # Return the data frame as-is if it's empty
}
# Add the InTheMoney column based on the Type of option (call or put)
option_data$InTheMoney <- ifelse(option_data$Type == "call" & option_data$Strike < vix_price, TRUE,
ifelse(option_data$Type == "put" & option_data$Strike > vix_price, TRUE, FALSE))
return(option_data)
})
# Check the first data frame (expiration date) to confirm the change
head(vix_options_with_itm[[1]])
# (5) Save relevant columns to CSV files with the specified format
save_option_data_to_csv <- function(option_data, expiration_date) {
# Select only the relevant columns: Strike, Bid, Ask, Price, InTheMoney
option_data_cleaned <- option_data %>%
select(Strike, Bid, Ask, Price, InTheMoney)
# Generate the filename with the current date and expiration date
file_name <- paste0("VIXdata", Sys.Date(), "Exp", expiration_date, ".csv")
# Save the cleaned data to a CSV file
write.csv(option_data_cleaned, file_name, row.names = FALSE)
# Return the file name for confirmation
return(file_name)
}
# Loop through the vix_options_with_itm list for each expiration date
file_names <- lapply(names(vix_options_with_itm), function(expiration_date) {
# Call the function to save the data for each expiration date
save_option_data_to_csv(vix_options_with_itm[[expiration_date]], expiration_date)
})
library(dplyr)
# (5) Save relevant columns to CSV files with the specified format
save_option_data_to_csv <- function(option_data, expiration_date) {
# Select only the relevant columns: Strike, Bid, Ask, Price, InTheMoney
option_data_cleaned <- option_data %>%
select(Strike, Bid, Ask, Price, InTheMoney)
# Generate the filename with the current date and expiration date
file_name <- paste0("VIXdata", Sys.Date(), "Exp", expiration_date, ".csv")
# Save the cleaned data to a CSV file
write.csv(option_data_cleaned, file_name, row.names = FALSE)
# Return the file name for confirmation
return(file_name)
}
# Loop through the vix_options_with_itm list for each expiration date
file_names <- lapply(names(vix_options_with_itm), function(expiration_date) {
# Call the function to save the data for each expiration date
save_option_data_to_csv(vix_options_with_itm[[expiration_date]], expiration_date)
})
# (5) Save relevant columns to CSV files with the specified format
save_option_data_to_csv <- function(option_data, expiration_date) {
# Check if the 'InTheMoney' column exists in the data
if ("InTheMoney" %in% colnames(option_data)) {
# Select only the relevant columns: Strike, Bid, Ask, Price, InTheMoney
option_data_cleaned <- option_data %>%
select(Strike, Bid, Ask, Price, InTheMoney)
# Generate the filename with the current date and expiration date
file_name <- paste0("VIXdata", Sys.Date(), "Exp", expiration_date, ".csv")
# Save the cleaned data to a CSV file
write.csv(option_data_cleaned, file_name, row.names = FALSE)
# Return the file name for confirmation
return(file_name)
} else {
warning(paste("InTheMoney column not found for expiration date:", expiration_date))
return(NULL)  # Return NULL if InTheMoney column is missing
}
}
# Loop through the vix_options_with_itm list for each expiration date
file_names <- lapply(names(vix_options_with_itm), function(expiration_date) {
# Call the function to save the data for each expiration date
save_option_data_to_csv(vix_options_with_itm[[expiration_date]], expiration_date)
})
# Print the file names to confirm the files were saved
file_names
# (4) Adding 'InTheMoney' Column to the options data
# Ensure that the 'InTheMoney' column is added correctly
# Function to add 'InTheMoney' column
add_in_the_money_column <- function(option_data, current_price) {
option_data$InTheMoney <- ifelse(
option_data$Type == "call" & option_data$Strike < current_price, TRUE,
ifelse(option_data$Type == "put" & option_data$Strike > current_price, TRUE, FALSE)
)
return(option_data)
}
# Apply the function to add the 'InTheMoney' column for each expiration date
vix_options_with_itm <- lapply(vix_options_with_itm, function(option_data) {
# Assuming current_price is available from part 2
current_price <-  VIX.current_price  # Replace with actual current price from step 2
option_data <- add_in_the_money_column(option_data, current_price)
return(option_data)
})
# Download the current price for ^VIX (last quote price)
vix_price_data <- getQuote("^VIX")
vix_price <- vix_price_data$Last
vix_price
library(quantmod)
# Retrieve the last quote price of ^VIX (for example, using quantmod)
getSymbols("^VIX", src = "yahoo", auto.assign = TRUE)
VIX.current_price <- Cl(get("^VIX"))[length(Cl(get("^VIX")))]  # Closing price (latest)
# Download the current price for ^VIX (last quote price)
vix_price_data <- getQuote("^VIX")
vix_price <- vix_price_data$Last
vix_price
# (2) Download the current price for ^VIX (the last quote price)
# Assuming you're using a method like quantmod or a similar approach to get the data
library(quantmod)
# Retrieve the last quote price of ^VIX (for example, using quantmod)
getSymbols("^VIX", src = "yahoo", auto.assign = TRUE)
VIX.current_price <- Cl(get("^VIX"))[length(Cl(get("^VIX")))]  # Closing price (latest)
# Load the required package
library(quantmod)
# Try fetching the VIX data from Yahoo Finance
try({
getSymbols("^VIX", src = "yahoo", auto.assign = TRUE)
# Check if the VIX data was retrieved successfully
VIX.current_price <- Cl(get("^VIX"))[length(Cl(get("^VIX")))]  # Closing price (latest)
print(paste("Current VIX price:", VIX.current_price))
}, silent = FALSE)
# If the above fails, we can try alternative methods or print a message
if (!exists("VIX.current_price")) {
warning("Failed to retrieve VIX data. Please check the symbol or data source.")
}
# (4) Adding 'InTheMoney' Column to the options data
# Ensure that the 'InTheMoney' column is added correctly
# Function to add 'InTheMoney' column
add_in_the_money_column <- function(option_data, current_price) {
option_data$InTheMoney <- ifelse(
option_data$Type == "call" & option_data$Strike < current_price, TRUE,
ifelse(option_data$Type == "put" & option_data$Strike > current_price, TRUE, FALSE)
)
return(option_data)
}
# Apply the function to add the 'InTheMoney' column for each expiration date
vix_options_with_itm <- lapply(vix_options_with_itm, function(option_data) {
option_data <- add_in_the_money_column(option_data, VIX.current_price)  # Use the defined VIX.current_price
return(option_data)
})
# Install packages if not installed
install.packages(c("httr", "rvest"))
# Load the libraries
library(httr)
library(rvest)
# URL for scraping VIX data (from Yahoo Finance)
vix_url <- "https://finance.yahoo.com/quote/^VIX"
# Scrape the current price from Yahoo Finance
page <- read_html(vix_url)
current_vix_price <- page %>% html_node(".Trsdu(0.3s) Fw(b) Fz(36px) Mb(-4px) D(ib)") %>% html_text()
# Load necessary libraries
library(httr)
library(rvest)
# Define the URL for scraping VIX data from Yahoo Finance
vix_url <- "https://finance.yahoo.com/quote/^VIX"
# Scrape the webpage
page <- read_html(vix_url)
# Print the first few lines of the page to inspect
print(page)
# Try to find the correct selector for the VIX price by inspecting the structure of the page
# Use a more general selector to target the value that looks like the price
current_vix_price <- page %>%
html_node(xpath = '//*[@data-test="OPEN-value"]') %>%
html_text()
# Convert the value to numeric (handling cases where the price might not be found)
VIX.current_price <- as.numeric(gsub(",", "", current_vix_price))
# Print the result to check
if (!is.na(VIX.current_price)) {
print(paste("Current VIX price:", VIX.current_price))
} else {
warning("Failed to scrape the current VIX price.")
}
# Load necessary libraries
install.packages("quantmod")
install.packages("tidyverse")
library(quantmod)
library(tidyverse)
# Function to fetch option data for VIX ticker
get_vix_options <- function(ticker) {
# Retrieve option data for the ticker from Yahoo Finance
option_data <- getOptionChain(ticker)
# Combine all expiration dates data
option_data_combined <- bind_rows(option_data)
return(option_data_combined)
}
# Get options data for ^VIX
VIX.options <- get_vix_options('^VIX')
# View the data
head(VIX.options)
install.packages("tidyverse")
install.packages("quantmod")
# Load the quantmod package
library(quantmod)
# Get the last quote for the ^VIX ticker (current price)
get_last_quote <- function(ticker) {
# Retrieve the latest data for the ticker
stock_data <- getSymbols(ticker, src = "yahoo", auto.assign = FALSE)
# Extract the last available closing price (last quote)
last_quote <- Cl(stock_data)[length(Cl(stock_data))]
return(last_quote)
}
# Get the current price for ^VIX
vix_current_price <- get_last_quote("^VIX")
# Print the current price
print(vix_current_price)
# Load necessary libraries
library(dplyr)
# Assuming VIX.options contains columns: Type, Bid, Ask, and Expiration
# If VIX.options is not already loaded, you would load it first (e.g., from previous step)
# VIX.options <- get_vix_options("^VIX")
# Calculate the average of Bid and Ask for each option (both calls and puts)
VIX.options <- VIX.options %>%
mutate(Price = (Bid + Ask) / 2)  # Create a new column 'Price' with the average of Bid and Ask
# View the updated data with the new 'Price' column
head(VIX.options)
# Load necessary libraries
library(dplyr)
# Assuming VIX.options contains the columns: Type, Bid, Ask, Strike, Expiration, ITM
# You can calculate the current price of VIX (as done in previous step)
vix_current_price <- get_last_quote("^VIX")
# Add the 'InTheMoney' column based on option type (Call/Put) and strike price
VIX.options <- VIX.options %>%
mutate(
InTheMoney = case_when(
Type == "Call" & Strike < vix_current_price ~ TRUE,   # Call option in-the-money condition
Type == "Put" & Strike > vix_current_price ~ TRUE,    # Put option in-the-money condition
TRUE ~ FALSE  # Default to FALSE if conditions are not met
)
)
library(quantmod)
# 1. Download option data for VIX
symbol <- "^VIX"
getOptionChain(symbol)
# 2. Download the current price (last quote price) for VIX
current_price <- getQuote(symbol)
current_price <- current_price$Last
# Assuming VIX.options is a data frame with the option chain information
VIX.options$Price <- (VIX.options$Bid + VIX.options$Ask) / 2
# 4. Add InTheMoney column
VIX.options$InTheMoney <- ifelse(VIX.options$OptionType == "call" & VIX.options$Strike < current_price, TRUE,
ifelse(VIX.options$OptionType == "put" & VIX.options$Strike > current_price, TRUE, FALSE))
# Ensure columns are correctly named and available
str(VIX.options)  # Check the structure of the data
# Check that we have correct columns: Strike, Bid, Ask
head(VIX.options)
# Assuming you do not have OptionType directly, let's manually create it:
# Call options have Strike < current price, Put options have Strike > current price
VIX.options$OptionType <- ifelse(VIX.options$Strike < current_price, "call", "put")
# Now calculate InTheMoney based on OptionType
VIX.options$InTheMoney <- ifelse(VIX.options$OptionType == "call" & VIX.options$Strike < current_price, TRUE,
ifelse(VIX.options$OptionType == "put" & VIX.options$Strike > current_price, TRUE, FALSE))
# Check if InTheMoney column is correctly populated
table(VIX.options$InTheMoney)
# Continue with creating the Price column
VIX.options$Price <- (VIX.options$Bid + VIX.options$Ask) / 2
# Save filtered columns to CSV as required
VIX.options_filtered <- VIX.options[, c("Strike", "Bid", "Ask", "Price", "InTheMoney")]
expiration_date <- "2021-10-08"  # Use actual expiration date
current_date <- Sys.Date()
# Create file name and save
file_name <- paste0("VIXdata", current_date, "Exp", expiration_date, "puts.csv")
write.csv(VIX.options_filtered, file_name, row.names = FALSE)
# 5. Filter relevant columns and save to CSV
VIX.options_filtered <- VIX.options[, c("Strike", "Bid", "Ask", "Price", "InTheMoney")]
expiration_date <- "2021-10-08"  # Replace with the actual expiration date
current_date <- Sys.Date()
# Format the file name
file_name <- paste0("VIXdata", current_date, "Exp", expiration_date, "puts.csv")
# Save to CSV
write.csv(VIX.options_filtered, file_name, row.names = FALSE)
# 5. Filter relevant columns and save to CSV
VIX.options$OptionType <- ifelse(VIX.options$Strike < current_price, "call", "put")
VIX.options$InTheMoney <- ifelse(VIX.options$OptionType == "call" & VIX.options$Strike < current_price, TRUE,
ifelse(VIX.options$OptionType == "put" & VIX.options$Strike > current_price, TRUE, FALSE))
VIX.options_filtered <- VIX.options[, c("Strike", "Bid", "Ask", "Price", "InTheMoney")]
expiration_date <- "2021-10-08"  # Replace with the actual expiration date
current_date <- Sys.Date()
# Format the file name
file_name <- paste0("VIXdata", current_date, "Exp", expiration_date, "puts.csv")
# Save to CSV
write.csv(VIX.options_filtered, file_name, row.names = FALSE)
# Load necessary libraries
set.seed(123)  # For reproducibility
# Given parameters
S0 <- 100      # Initial stock price
K <- 100       # Strike price
T <- 1         # Time to maturity (1 year)
sigma <- 0.2   # Volatility
r <- 0.05      # Risk-free rate
n <- 252       # Number of steps (252 trading days)
m <- 10000     # Number of paths
# Simulate m paths for the stock price
dt <- T / n    # Time step
S <- matrix(0, nrow=m, ncol=n+1)  # Matrix to store simulated paths
S[,1] <- S0    # Set the initial stock price for all paths
# Simulate the paths using Geometric Brownian Motion
for (i in 1:m) {
for (t in 2:(n+1)) {
dW <- rnorm(1, mean=0, sd=sqrt(dt))  # Random normal variable for the Wiener process
S[i,t] <- S[i,t-1] * exp((r - 0.5 * sigma^2) * dt + sigma * dW)
}
}
# Calculate the payoff at maturity for each path
payoff <- pmax(K - S[,n+1], 0)
# Discount the payoff to present value
put_price_mc <- exp(-r * T) * mean(payoff)
put_price_mc
# Black-Scholes Formula for European Put Option
black_scholes_put <- function(S0, K, T, sigma, r) {
d1 <- (log(S0 / K) + (r + 0.5 * sigma^2) * T) / (sigma * sqrt(T))
d2 <- d1 - sigma * sqrt(T)
put_price_bs <- exp(-r * T) * (K * pnorm(-d2) - S0 * pnorm(-d1))
return(put_price_bs)
}
# Calculate the Black-Scholes price
put_price_bs <- black_scholes_put(S0, K, T, sigma, r)
put_price_bs
# Compare Monte Carlo and Black-Scholes prices
difference <- abs(put_price_mc - put_price_bs)
difference
library(quantmod)
# 1. Download option data for VIX
symbol <- "^VIX"
getOptionChain(symbol)
# 2. Download the current price (last quote price) for VIX
current_price <- getQuote(symbol)
current_price <- current_price$Last
# Assuming VIX.options is a data frame with the option chain information
VIX.options$Price <- (VIX.options$Bid + VIX.options$Ask) / 2
